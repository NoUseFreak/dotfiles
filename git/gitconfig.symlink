[user]
	name = Dries De Peuter
	email = dries@nousefreak.be
	signingkey = F471B0FCF2D1F869

[core]
	excludesfile = ~/.gitignore_global
	pager = less -FXRS -x2
	editor = vim
	whitespace = cr-at-eol
	autocrlf = input

[help]
	autocorrect = 1

[color]
	ui = true

[color "diff"]
	meta = blue black bold

[push]
	default = simple

[alias]
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	lga = log --graph --pretty=oneline --abbrev-commit --decorate --all
	st = status -sbu
	co = checkout
	cob = checkout -b
	ci = commit
	br = branch -v
	diff = diff --ignore-space-at-eol -b -w --ignore-blank-lines

	##
	# Fun
	##

	# show what I did today
    day = "!sh -c 'git log --reverse --no-merges --branches=* --date=local --after=\"yesterday 11:59PM\" --author=\"`git config --get user.name`\"'"

	# order files by number of commits, ascending
	# Written by Corey Haines
	# Scriptified by Gary Bernhardt
	# Show churn for a time range:
	#   $ git churn --since='1 month ago'
	churn = "!f() { git log --all -M -C --name-only --format='format:' \"$@\" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print \"count\tfile\"} {print $1 \"\t\" $2}' | sort -g; }; f"


	##
	# Branches
	##

	# Get the current branch name (not so useful in itself, but used in other aliases)
	branch-name = "!git rev-parse --abbrev-ref HEAD"

	# Push the current branch to the remote "origin", and set it to track
	# the upstream branch
	publish = "!git push -u origin $(git branch-name)"

	# Delete the remote version of the current branch
	unpublish = "!git push origin :$(git branch-name)"

	# Delete a branch and recreate it from master â€” useful if you have, say,
	# a development branch and a master branch and they could conceivably go
	# out of sync
	recreate = "!f() { [[ -n $@  ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish;  }; f"

	# rebase the current branch with changes from upstream remote
	update = !git fetch upstream && git rebase upstream/`git rev-parse --abbrev-ref HEAD`

	# Delete any branches that have been merged into master
	# See also: https://gist.github.com/robmiller/5133264
	delete-merged-branches = "!git co master && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# tag aliases
	# show the last tag
	lt = describe --tags --abbrev=0

	##
	# Files
	##

	# Unstage any files that have been added to the staging area
	unstage = reset HEAD

	# Show changes that have been staged
	diffc = diff --cached

	# Checkout our version of a file and add it
	ours = "!f() { git checkout --ours $@ && git add $@;  }; f"

	# Checkout their version of a file and add it
	theirs = "!f() { git checkout --theirs $@ && git add $@;  }; f"

	# Show big files in repo
	bigfiles = "!f() { git rev-list --objects --all | git cat-file --batch-check='%(objecttype) %(objectname) %(objectsize) %(rest)' | sed -n 's/^blob //p' | sort --numeric-sort --key=2 | cut -c 1-12,41- | $(command -v gnumfmt || echo numfmt) --field=2 --to=iec-i --suffix=B --padding=7 --round=nearest | tail;  }; f"


[credential]
	helper = osxkeychain

[merge]
    tool = "vscode"

[mergetool "vscode"]
    cmd = "code --wait $MERGED"

[diff]
    tool = "vscode"

[difftool]
    prompt = false
	
[difftool "vscode"]
    cmd = "code --wait --diff $LOCAL $REMOTE"
    trustExitCode = false
[init]
	templatedir = ~/.gittemplates
